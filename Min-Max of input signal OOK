#include <avr_stl.h>

/*#include <unwind-cxx.h>
#include <StandardCplusplus.h>
#include <system_configuration.h>
#include <utility.h>*/

#include <vector>
#include <math.h>

double PinIn1=A3; //PD1
double PinIn2=A4; //PD2
double PinIn3=A5; //PD3

double val1=0;
double val2=0;
double val3=0;

double avg1=0;
double avg2=0;
double avg3=0;

double sum1=0;
double sum2=0;
double sum3=0;

double thresh1=0;
double thresh2=0;
double thresh3=0;

double sum_max1=0;
double sum_min1=0;

double avg_max1=0;
double avg_min1=0;

double max2=0;
double max3=0;

double min2=1000;
double min3=1000;

double percentage = 0.0007;

int sample_size=100;

std::vector <int> vect1;
std::vector <int> vect2;
std::vector <int> vect3;

std::vector <int> max1;
std::vector <int> min1;

std::vector <int> vect_in_1;

//std::vector <int> vect_check;

char a=0;
bool check = false;

void setup() {  
  Serial.begin(9600);
  pinMode(PinIn1, INPUT); //Photodiode 1
  pinMode(PinIn2, INPUT); //Photodiode 2
  pinMode(PinIn3, INPUT); //Photodiode 3
}

int max_finder(int a, int b){
  return(a>b? a:b);
}

int min_finder(int a, int b){
  return(a<b? a:b);
}

void loop(){
  
    vect1.push_back(analogRead(PinIn1));
    vect2.push_back(analogRead(PinIn2));
    vect3.push_back(analogRead(PinIn3));
    
    if(vect1.size()>sample_size){
      vect1.erase(vect1.begin());
      vect2.erase(vect2.begin());
      vect3.erase(vect3.begin());
      
      max1.erase(max1.begin());
      min1.erase(min1.begin());
    }
    
    //val1=analogRead(PinIn1);
    //val2=analogRead(PinIn2);
    //val3=analogRead(PinIn3);

    if(max_finder(max1[max1.size()-1], vect1[vect1.size()-1])==max1[max1.size()-1]){
      max1.push_back(max_finder(max1[max1.size()-1], vect1[vect1.size()-1]));
    }
    
    max2=max_finder(max2, vect2[vect2.size()-1]);
    max3=max_finder(max3, vect3[vect3.size()-1]);
    
    if(min_finder(min1[min1.size()-1], vect1[vect1.size()-1])==max1[max1.size()-1]){
      min1.push_back(min_finder(min1[min1.size()-1], vect1[vect1.size()-1]));
    }
    min2=min_finder(min2, vect2[vect2.size()-1]);
    min3=min_finder(min3, vect3[vect3.size()-1]);

    for(int i=0; i<sample_size; i++){
      sum1+=vect1[i];
      sum2+=vect2[i];
      sum3+=vect3[i];

      sum_max1+=max1[i];
      sum_min1+=min1[i];
      
    /*max1=max(vect1[i],max1);
      max2=max(vect2[i],max2);
      max3=max(vect3[i],max3);
      
      min1=min(vect1[i],min1);
      min2=min(vect2[i],min2);
      min3=min(vect3[i],min3);*/
      }
      
    avg1=(sum1/sample_size);
    avg2=(sum2/sample_size);
    avg3=(sum3/sample_size);

    avg_max1=(sum_max1/sample_size);
    avg_min1=(sum_min1/sample_size);
    
    /*
    thresh1=avg1+avg1*percentage;
    thresh2=avg2+avg2*percentage;
    thresh3=avg3+avg3*percentage;
*/
  /*  if(thresh1>vect1[vect1.size()-1]){
      Serial.println("1");
    }
    else{
      Serial.println("0");
    }*/
    //Serial.println(thresh1);
   /* vect_in_1.push_back(analogRead(PinIn3)>thresh3);

    if(vect_in_1.size()>7){
    
    Serial.println("Size reached");     
    for(int i=0; i<8; i++){
      Serial.println(vect_in_1[i]);
      a=a<<1;
      a+=vect_in_1[i]; 
    } 
    
    if(a=='~'){
      //Allows a tilde to be input at end of string to restart looking for tilde
      check = !check;
      Serial.println("tilda found");
    }
    
    if(check){
      vect_in_1.clear();
    } else {
      vect1.erase(vect1.begin());
    }
    }*/
    
     /* if(thresh1>vect1[vect1.size()-1]){
    /*  Serial.print("1");
      Serial.print(" ");
    }
    else{
      Serial.print("0");
      Serial.print(" ");
    } */
    //Serial.print(vect1[vect1.size()-1]); Serial.print(" "); Serial.print(avg1); Serial.print(" "); Serial.println(thresh1);

    //Serial.print(vect2[vect2.size()-1]);  Serial.print(" "); Serial.print(avg2); Serial.print(" "); Serial.println(thresh2);

    Serial.print(vect3[vect3.size()-1]); Serial.print(" "); Serial.print(max3); Serial.print(" "); Serial.println(min3);

    
    sum1=0;
    sum2=0;
    sum3=0;

    sum_max1=0;
    sum_min1=0;

    avg_max1=0;
    avg_min1=0;

   // avg1=0;
   // avg2=0;
   // avg3=0;

   // thresh1=0;
   // thresh2=0;
   // thresh3=0;
    //delay(20);
 }
