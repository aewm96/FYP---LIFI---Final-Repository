#include <avr_stl.h>
#include <vector>

//Transmit rate bps (bits per second) - This controls how many bits are streamed across
#define TX_RATE 50

double PinIn1=A3; //PD1
double PinIn2=A4; //PD2
double PinIn3=A5; //PD3

double val1=0;
double val2=0;
double val3=0;

double avg1=0;
double avg2=0;
double avg3=0;

double sum1=0;
double sum2=0;
double sum3=0;

double thresh1_upper=0;
double thresh2_upper=0;
double thresh3_upper=0;

double thresh1_lower=0;
double thresh2_lower=0;
double thresh3_lower=0;

double percentage_upper = 0.00055;
double percentage_lower = 0.00055;

int sample_size=100;

std::vector <int> vect1;
std::vector <int> vect2;
std::vector <int> vect3;

std::vector<long>TX_vect;

int bit_count1=0;
int bit_count2=0;
int bit_count3=0;

byte bit_memory1=0;
byte bit_memory2=0;
byte bit_memory3=0;

char b1;
char b2;
char b3;

bool TX_bit1 = false;
bool TX_bit2 = false;
bool TX_bit3 = false;

bool check1=false;
bool check2=false;
bool check3=false;
bool tester=false;


void setup(){
  Serial.begin(9600);
}

void loop(){
    vect1.push_back(analogRead(PinIn1));
    vect2.push_back(analogRead(PinIn2));
    vect3.push_back(analogRead(PinIn3));
   
    if(vect1.size()>sample_size){
      vect1.erase(vect1.begin());
      vect2.erase(vect2.begin());
      vect3.erase(vect3.begin());
    }

    for(int i=0; i<sample_size; i++){
      sum1+=vect1[i];
      sum2+=vect2[i];
      sum3+=vect3[i];
     }
     
    avg1=(sum1/sample_size);
    avg2=(sum2/sample_size);
    avg3=(sum3/sample_size);

    thresh1_upper=avg1+avg1*percentage_upper;
    thresh2_upper=avg2+avg2*percentage_upper;
    thresh3_upper=avg3+avg3*percentage_upper;

    thresh1_lower=avg1-avg1*percentage_lower;
    thresh2_lower=avg2-avg2*percentage_lower;
    thresh3_lower=avg3-avg3*percentage_lower;

    //Upper threshold's to bits
    if(vect1[vect1.size()-1]>=thresh1_upper){
      TX_bit1=true;
      bit_memory1=bit_memory1<<1;
      bitWrite(bit_memory1, 0, TX_bit1);
      bit_count1++;
    }

    else if(vect1[vect1.size()-1]<=thresh1_lower){
      TX_bit1=false;
      bit_memory1=bit_memory1<<1;
      bitWrite(bit_memory1, 0, TX_bit1);
      bit_count1++;
    }

    if(vect2[vect2.size()-1]>=thresh2_upper){
      TX_bit2=true;
      bit_memory2=bit_memory2<<1;
      bitWrite(bit_memory2, 0, TX_bit2);
      bit_count2++;
    }

    else if(vect2[vect2.size()-1]<=thresh2_lower){
      TX_bit2=false;
      bit_memory2=bit_memory2<<1;
      bitWrite(bit_memory2, 0, TX_bit2);
      bit_count2++;
    }

    if(vect3[vect3.size()-1]>=thresh3_upper){
      TX_bit3=true;
      bit_memory3=bit_memory3<<1;
      bitWrite(bit_memory3, 0, TX_bit3);
      bit_count3++;
    }

    else if(vect3[vect3.size()-1]<=thresh3_lower){
      TX_bit3=false;
      bit_memory3=bit_memory3<<1;
      bitWrite(bit_memory3, 0, TX_bit3);
      bit_count3++;
    }


 

//Conversion from bits to bytes and characters 1:
   if(bit_count1==8 && bit_memory1=='~'){
  // Serial.print("Tilda Found - 1");
    check1=!check1;
    bit_memory1=0;
    bit_count1=0;
   }
   
   if(bit_count1==8 && check1==true){
     //Serial.println("------------------------");
     //Serial.println(bit_memory1, BIN);
     //Serial.println(" ");
     //Serial.println(bit_memory1, DEC);
     b1=bit_memory1;
     //Serial.println(" ");
     //Serial.println(b1);
     bit_count1=0;
     bit_memory1=0;
   }

   if(bit_count1>7){
    bit_count1=0;
   }
   
//Conversion from bits to bytes and characters 2:
   if(bit_count2==8 && bit_memory2=='~'){
    //Serial.print("Tilda Found - 2");
    check2=!check2;
    bit_memory2=0;
    bit_count2=0;
   }
   
   if(bit_count2==8 && check2==true){
     //Serial.println("------------------------");
     //Serial.println(bit_memory2, BIN);
     //Serial.println(" ");
     //Serial.println(bit_memory2, DEC);
     b2=bit_memory2;
     //Serial.println(" ");
     //Serial.println(b2);
     bit_count2=0;
     bit_memory2=0;
   }

   if(bit_count2>7){
    bit_count2=0;
   }


//Conversion from bits to bytes and characters 3:
   if(bit_count3==8 && bit_memory3=='~'){
    //Serial.print("Tilda Found - 3");
    check3=!check3;
    bit_memory3=0;
    bit_count3=0;
   }
   
   if(bit_count3==8 && check3==true){
     //Serial.println("------------------------");
     //Serial.println(bit_memory3, BIN);
     //Serial.println(" ");
    //Serial.println(bit_memory3, DEC);
     b3=bit_memory3;
   // Serial.println(" ");
    // Serial.println(b3);
     bit_count3=0;
     bit_memory3=0;
   }

   if(bit_count3>7){
    bit_count3=0;
   }

    if(TX_bit1 == TX_bit2 || TX_bit1 == TX_bit3){
      tester = TX_bit1;
    } else if(TX_bit2 == TX_bit3){
      tester = TX_bit2;
    }
     /*if(TX_bit1 == TX_bit2 || TX_bit1 == TX_bit3 || TX_bit2 == TX_bit3){
      if(TX_bit1==1&&TX_bit2==1 || TX_bit2==1&&TX_bit3==1 || TX_bit1==1&&TX_bit3==1){
        tester=true;
      }

      else if(TX_bit1==1&&TX_bit2==0 || TX_bit2==1&&TX_bit3==0 || TX_bit1==1&&TX_bit3==0){
        tester=false;
      }
    }*/
    digitalWrite(2, TX_bit1);
    digitalWrite(A1, TX_bit2);
    digitalWrite(A2, TX_bit3);

  /* if(Serial.available()){
    char c=Serial.read(); //Gets a byte from the buffer
    Serial.println(c);
  }*/

  /* Serial.print(TX_bit1);
   Serial.print(" ");
   Serial.print(TX_bit2+2);
   Serial.print(" ");
   Serial.print(TX_bit3+4);
   Serial.print(" ");
   Serial.println(tester+6);*/
   
    //Serial.print(vect1[vect1.size()-1]+20);Serial.print(" ");Serial.print(thresh1_lower+20);Serial.print(" ");Serial.println(thresh1_upper+20);//Serial.print(" ");//Serial.println(TX_bit+848);////Serial.println(t);//
    //Serial.print(vect2[vect2.size()-1]);Serial.print(" ");Serial.print(thresh2_lower);Serial.print(" ");Serial.println(thresh2_upper);//Serial.print(" ");
    //Serial.print(vect3[vect3.size()-1]-20);Serial.print(" ");Serial.print(thresh3_lower-20);Serial.print(" "); Serial.println(thresh3_upper-20);//Serial.print(" ");
    //Serial.println(TX_bit1 + 880);
   
    sum1=0;
    sum2=0;
    sum3=0;

    avg1=0;
    avg2=0;
    avg3=0;

    thresh1_upper=0;
    thresh2_upper=0;
    thresh3_upper=0;

    thresh1_lower=0;
    thresh2_lower=0;
    thresh3_lower=0;
    delay(1000/TX_RATE);
}
