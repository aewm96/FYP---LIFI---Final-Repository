#include <TimerOne.h>
#include <avr_stl.h>
#include <vector>

double PinIn1=A3; //PD1
double PinIn2=A4; //PD2
double PinIn3=A5; //PD3

double val1=0;
double val2=0;
double val3=0;

double avg1=0;
double avg2=0;
double avg3=0;

double sum1=0;
double sum2=0;
double sum3=0;

double thresh1_upper=0;
double thresh2_upper=0;
double thresh3_upper=0;

double thresh1_lower=0;
double thresh2_lower=0;
double thresh3_lower=0;

double percentage_upper = 0.001;
double percentage_lower = 0.001;

int sample_size=100;

std::vector <int> vect1;
std::vector <int> vect2;
std::vector <int> vect3;

std::vector <bool> buff;

byte a=0;
char b=0;
bool check = false;
int count = 0;
String mem_string="";

bool timing_switch=false;
int t=0;

void setup(){
Serial.begin(9600);
Timer1.initialize(150000); // initialize timer1, and set a 1 second period (0.15)
Timer1.attachInterrupt(Timer); // attaches Blink() as a timer interrupt function
}

void Timer(void){
   if(analogRead(PinIn1)>=thresh1_upper&&timing_switch==false){
      buff.push_back(true);
    }
    
    if(analogRead(PinIn1)<=thresh1_lower&&timing_switch==true){
      buff.push_back(false);
    }
    timing_switch=!timing_switch;
}

void loop(){
  //Serial.println(a);
  
    vect1.push_back(analogRead(PinIn1));
    vect2.push_back(analogRead(PinIn2));
    vect3.push_back(analogRead(PinIn3));
    
    if(vect1.size()>sample_size){
      vect1.erase(vect1.begin());
      vect2.erase(vect2.begin());
      vect3.erase(vect3.begin());
    }

    for(int i=0; i<sample_size; i++){
      sum1+=vect1[i];
      sum2+=vect2[i];
      sum3+=vect3[i];
     }
      
    avg1=(sum1/sample_size);
    avg2=(sum2/sample_size);
    avg3=(sum3/sample_size);

    thresh1_upper=avg1+avg1*percentage_upper;
    thresh2_upper=avg2+avg2*percentage_upper;
    thresh3_upper=avg2+avg2*percentage_upper;

    thresh1_lower=avg1-avg1*percentage_lower;
    thresh2_lower=avg2-avg2*percentage_lower;
    thresh3_lower=avg3-avg3*percentage_lower;

  if(check){
    if(buff.size()>=8){
      for(int i=0; i<8; i++){
        if (buff[buff.begin()]){
          a=a<<1;
          a+=1;
        }
        else{
          a=a<<1;
        }
        buff.erase(buff.begin());
       }
      }
     }
     
   else{
    if(buff.size()>0){
        if (buff[buff.begin()]){
          a=a<<1;
          a+=1;
        }
        else{
          a=a<<1;
        }
        buff.erase(buff.begin());
        count++;
      }
     }
        
  if(a=='~'&&count==8){
    Serial.print("~");
    if(check){Serial.println(mem_string);;mem_string="";}
    check= !check;
    count=0;
    a=0;
  }

   else if(check&&count==8){
    b=a;
    mem_string+=b;
    Serial.println(a, BIN);
    /*Serial.print(" ");
    Serial.print(a, DEC);
    Serial.print(" ");
    Serial.println(b);
    Serial.println(a, BIN);*/
    }

  if(count==8&&check){count=0;}
  else if (count==8){count=7;}

  if(timing_switch==1){
    t=852;
  }
  else{
    t=846;
  }

  Serial.print(vect1[vect1.size()-1]);Serial.print(" ");Serial.println(t);//Serial.print(" ");Serial.print(thresh1_upper);Serial.print(" ");Serial.print(thresh1_lower);
    sum1=0;
    sum2=0;
    sum3=0;

    avg1=0;
    avg2=0;
    avg3=0;

    thresh1_upper=0;
    thresh2_upper=0;
    thresh3_upper=0;

    thresh1_lower=0;
    thresh2_lower=0;
    thresh3_lower=0;
delay(10);
}
